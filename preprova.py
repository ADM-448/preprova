import streamlit as st
from supabase import create_client
from config import SUPABASE_URL, SUPABASE_KEY

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

def delete_preprova(preprova_id):
    """Apaga a pr√©-prova do banco de dados e do armazenamento."""
    try:
        # Obt√©m a pr√©-prova para deletar o arquivo do Supabase Storage
        response = supabase.table("preprovas").select("pdf_url").eq("id", preprova_id).execute()
        
        if not response.data:
            st.error("Erro: Pr√©-prova n√£o encontrada.")
            return

        pdf_url = response.data[0]["pdf_url"]
        file_name = pdf_url.split("/")[-1]  # Extrai o nome do arquivo do Supabase Storage
        
        # Apaga o arquivo do Supabase Storage
        supabase.storage.from_("pdfs").remove([file_name])

        # Apaga as quest√µes associadas √† pr√©-prova
        supabase.table("questoes").delete().eq("preprova_id", preprova_id).execute()

        # Apaga a pr√©-prova do banco de dados
        supabase.table("preprovas").delete().eq("id", preprova_id).execute()

        st.success(f"üóëÔ∏è Pr√©-prova {preprova_id} apagada com sucesso! Atualize a p√°gina para ver as mudan√ßas.")

        # Atualiza a lista de pr√©-provas no session state
        st.session_state["preprovas"] = [p for p in st.session_state.get("preprovas", []) if p["id"] != preprova_id]

    except Exception as e:
        st.error(f"‚ùå Erro ao apagar a pr√©-prova: {str(e)}")

def preprova_page():
    st.title("Minhas Pr√©-Provas")

    user_id = st.session_state.get("user_id")
    if not user_id:
        st.error("‚ùå Usu√°rio n√£o autenticado. Fa√ßa login novamente.")
        return

    # Se as pr√©-provas ainda n√£o foram carregadas na sess√£o, busca do banco
    if "preprovas" not in st.session_state:
        response = supabase.table("preprovas").select("*").eq("user_id", user_id).execute()
       
